const { cmd } = require('../command');
const os = require("os");
const { runtime } = require('../lib/functions');
const config = require('../config');

cmd({
  pattern: "alie",
  alias: ["satus", "nline", "l"],
  desc: "Check bot is alive or not",
  category: "main",
  react: "‚ö°",
  filename: __filename
},
async (conn, mek, m, { from, sender, reply }) => {
  try {
    const status = `
‚ï≠‚îÄ‚îÄ‚îÄ„Äî *${config.BOT_NAME}* „Äï‚îÄ‚îÄ‚îÄ‚óâ
‚îÇ‚ú® *Bot is Active & Online!*
‚îÇ
‚îÇ‚ô¶Ô∏è *Owner:* ${config.OWNER_NAME}
‚îÇ‚ô¶Ô∏è *Version:* 5.0.0 max
‚îÇ‚ô¶Ô∏è *Prefix:* [${config.PREFIX}]
‚îÇ‚ô¶Ô∏è *Mode:* [${config.MODE}]
‚îÇ‚ô¶Ô∏è *RAM:* ${(process.memoryUsage().heapUsed / 1024 / 1024).toFixed(2)}MB / ${(os.totalmem() / 1024 / 1024).toFixed(2)}MB
‚îÇ‚ô¶Ô∏è *Host:* ${os.hostname()}
‚îÇ‚ô¶Ô∏è *Uptime:* ${runtime(process.uptime())}
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚óâ
> ${config.DESCRIPTION}`;

    const buttons = [
      {
        buttonId: "action",
        buttonText: { displayText: "üìÇ ·¥ç·¥á…¥·¥ú ·¥è·¥ò·¥õ…™·¥è…¥Íú±" },
        type: 4,
        nativeFlowInfo: {
          name: "single_select",
          paramsJson: JSON.stringify({
            title: "üìÇ ·¥Ñ ü…™·¥Ñ·¥ã  ú·¥á Ä·¥á",
            sections: [
              {
                title: "üìÅ ·¥ç·¥á Ä·¥Ñ·¥á·¥Ö·¥ás",
                highlight_label: "",
                rows: [
                  {
                    title: "üìÇ ·¥ç·¥á…¥·¥ú",
                    description: "·¥è·¥ò·¥á…¥ ·¥Ä ü ü ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥ÖÍú±",
                    id: `${config.PREFIX}menu`,
                  },
                  {
                    title: "üëë ·¥è·¥°…¥·¥á Ä",
                    description: "·¥Ñ·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ  ô·¥è·¥õ ·¥è·¥°…¥·¥á Ä",
                    id: `${config.PREFIX}owner`,
                  },
                  {
                    title: "üì∂ ·¥ò…™…¥…¢",
                    description: "·¥õ·¥áÍú±·¥õ  ô·¥è·¥õ Íú±·¥ò·¥á·¥á·¥Ö",
                    id: `${config.PREFIX}ping`,
                  },
                  {
                    title: "üñ•Ô∏è Íú± èÍú±·¥õ·¥á·¥ç",
                    description: "Íú± èÍú±·¥õ·¥á·¥ç …™…¥Íú∞·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥",
                    id: `${config.PREFIX}system`,
                  },
                  {
                    title: "üõ†Ô∏è  Ä·¥á·¥ò·¥è",
                    description: "…¢…™·¥õ ú·¥ú ô  Ä·¥á·¥ò·¥èÍú±…™·¥õ·¥è Ä è",
                    id: `${config.PREFIX}repo`,
                  },
                ],
              },
            ],
          }),
        },
      },
    ];

    await conn.sendMessage(from, {
      image: { url: config.MENU_IMAGE_URL },
      caption: status,
      buttons: buttons,
      contextInfo: {
        mentionedJid: [m.sender],
        forwardingScore: 1000,
        isForwarded: true,
        forwardedNewsletterMessageInfo: {
          newsletterJid: '120363416335506023@newsletter',
          newsletterName: '·¥è ô·¥á·¥Ö·¥õ·¥á·¥Ñ ú',
          serverMessageId: 143
        }
      }
    }, { quoted: mek });

  } catch (e) {
    console.error("Alive Error:", e);
    reply(`An error occurred: ${e.message}`);
  }
});
